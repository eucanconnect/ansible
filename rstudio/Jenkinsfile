pipeline {
    agent {
        kubernetes {
            label 'ansible'
        }
    }
    environment {
        HOST_KEY_DIR = '/home/jenkins/ssh-host-ca'
        SSH_DIR= '/home/jenkins/.ssh'
        HOST_KEY_CA = 'ssh_host_molgenis_key'
    }
    stages {
        stage('Steps [ PR ]') {
            when {
                changeRequest()
            }
            stages {
                stage('Retrieve build secrets [ PR ]') {
                    steps {
                        container('vault') {
                            script {
                                sh "mkdir ${SSH_DIR}"
                                sh "mkdir ${HOST_KEY_DIR}"
                                sh(script: 'vault read -field=value secret/ops/certificate/ssh_host_key_signing/knownhosts >> ${SSH_DIR}/knownhosts')
                                sh(script: 'vault read -field=value secret/ops/certificate/ssh_host_key_signing/molgenis_ca.pub > ${HOST_KEY_DIR}/ssh_host_molgenis_key.pub')
                                sh(script: 'vault read -field=value secret/ops/certificate/ssh_host_key_signing/molgenis_ca > ${HOST_KEY_DIR}/${HOST_KEY_CA}')
                                sh("chmod 400 ${HOST_KEY_DIR}/${HOST_KEY_CA}")
                            }
                        }
                    }
                }
                stage('Prepare image [ PR ]') {
                    steps {
                        container('centos-6') {
                            sh 'yum install -y epel-release'
                            sh 'yum install -y openssh'
                            sh 'yum install -y ansible'
                        }
                    }
                }
                stage('Build [ PR ] [ new image ]') {
                    steps {
                        container('centos-6') {
                            ansiblePlaybook(
                                    inventory: 'ci/inventory_local.ini',
                                    playbook: 'playbook.yml',
                                    extraVars: [
                                            ssh_host_signer_key_directory : "${HOST_KEY_DIR}",
                                            ssh_host_signer_ca_key        : "${HOST_KEY_DIR}/${HOST_KEY_CA}",
                                            run_as_gcc                    : true,
                                            experimental                  : true,
                                            ci                            : true
                                    ])
                        }

                    }
                }
                stage('Build [ PR ] [ update image ]') {
                    steps {
                        container('centos-6') {
                            ansiblePlaybook(
                                    inventory: 'ci/inventory_local',
                                    playbook: 'playbook.yml',
                                    extraVars: [
                                            ssh_host_signer_key_directory : "${HOST_KEY_DIR}",
                                            ssh_host_signer_ca_key        : "${HOST_KEY_DIR}/${HOST_KEY_CA}",
                                            run_as_gcc                    : true,
                                            experimental                  : true,
                                            ci                            : true
                                    ])
                        }
                    }
                }
            }
        }
        stage('Steps [ master ]') {
            when {
                branch 'master'
            }
            stages {
                stage('Build [ master ] [ update existing image ]') {
                    steps {
                        milestone 1
                        container('ansible') {
                            ansiblePlaybook(
                                    inventory: 'ci/inventory.ini',
                                    playbook: 'playbook.yml',
                                    extraVars: [
                                            ssh_host_signer_key_directory : "${HOST_KEY_DIR}",
                                            ssh_host_signer_ca_key        : "${HOST_KEY_DIR}/${HOST_KEY_CA}",
                                            run_as_gcc                    : true,
                                            experimental                  : true,
                                            ci                            : true
                                    ])
                        }
                    }
                }
            }
        }
        stage('Steps [release]') {
            when {
                branch 'master'
            }
            stages {
                stage('Release [ master ] [ update all production hosts ]') {
                    steps {
                        timeout(time: 60, unit: 'MINUTES') {
                            script {
                                input(
                                        message: 'Do you want to release?',
                                        ok: 'Release'
                                )
                            }
                        }
                        milestone 2
                        container('ansible') {
                            ansiblePlaybook(
                                    inventory: 'ci/inventory.ini',
                                    playbook: 'playbook.yml',
                                    extraVars: [
                                            ssh_host_signer_key_directory : "${HOST_KEY_DIR}",
                                            ssh_host_signer_ca_key        : "${HOST_KEY_DIR}/${HOST_KEY_CA}",
                                            run_as_gcc                    : true,
                                            experimental                  : true,
                                            ci                            : true
                                    ])
                        }
                    }
                }
            }
        }
    }
}